/**
 * File: DashboardsGui.java
 * Date: April 16, 2020
 * @Author: Nour Debiat, Brian Rease, Rebekah Qu
 * Purpose: This window displays the dashboards where users can view appointments, pets, and clients.
 */

package vetportal;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.List;
import javax.swing.text.MaskFormatter;

public class DashboardsGui extends JFrame {

    // Create objects for pages
    VetPortal vetPortal;
    AddClient addClientPage;
    EditClient editClientPage;
    AddPet addPetPage;
    EditPet editPetPage;
    ViewClient viewClientPage;
    AddAppointment addAppointmentPage;
    EditAppointment editAppointmentPage;

    /**
     * Creates new form DashboardsGui
	 * @param vetPortal
	 * @throws ParseException
     */
    public DashboardsGui(VetPortal vetPortal) throws ParseException {
        super("Vet Portal");
        this.vetPortal = vetPortal;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws ParseException {

        dashboardPanel = new JPanel();
        dashboardTabs = new JTabbedPane();
        appointmentsTab = new JPanel();
        aDateSeach = new JLabel();
        createAppointmentBtn = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/calendar-plus.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
        aClientSearch = new JLabel();
        aClientField = new JTextField();            
        // Create date picker settings to define the date format
        DatePickerSettings dateSettings = new DatePickerSettings();
        dateSettings.setFormatForDatesCommonEra("yyyy-MM-dd");
        dateSettings.setFormatForDatesBeforeCommonEra("uuuu-MM-dd");        
        aDateField = new DatePicker(dateSettings);
        aSearchBtn = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/search.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
        aPetSearch = new JLabel();
        appointmentTableScroll = new JScrollPane();
        appointmentsTable = new JTable();
        aPetField = new JTextField();
        petsTab = new JPanel();
        createPetBtn = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/paw.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
        pNameSearch = new JLabel();
        pClientField = new JTextField();
        pNameField = new JTextField();
        petTableScroll = new JScrollPane();
        petsTable = new JTable();
        pClientSearch = new JLabel();
        pSearchBtn = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/search.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
        clientsTab = new JPanel();
        clientTableScroll = new JScrollPane();
        clientsTable = new JTable();
        createClientBtn = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/user-plus.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
        cNameSearch = new JLabel();
        cEmailSearch = new JLabel();
        cNumberSearch = new JLabel();
        cSearchBtn = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/search.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
        cNameField = new JTextField();
        cEmailField = new JTextField();
        MaskFormatter phoneFormat = new MaskFormatter("(***) ***-****");
        cNumberField = new JFormattedTextField(phoneFormat);
        logoutBtn = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/sign-out.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));

        myClientTableModel = new MyClientTableModel();
        clientTable = new JTable(myClientTableModel);
        clientRenderer = new ClientActionRenderer();
        clientEditor = new ClientActionEditor();
        myPetTableModel = new MyPetTableModel();
        petTable = new JTable(myPetTableModel);
        petRenderer = new PetActionRenderer();
        petEditor = new PetActionEditor();
        myAppointmentTableModel = new MyAppointmentTableModel();
        appointmentTable = new JTable(myAppointmentTableModel);
        appointmentRenderer = new AppointmentActionRenderer();
        appointmentEditor = new AppointmentActionEditor();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        dashboardPanel.setBackground(new Color(255, 255, 255));
        dashboardPanel.setForeground(new Color(41, 41, 41));

        dashboardTabs.setBackground(new Color(255, 255, 255));
        dashboardTabs.setForeground(new Color(38, 38, 38));
        dashboardTabs.setFont(new Font("Calibri", 1, 14)); // NOI18N

        appointmentsTab.setBackground(new Color(255, 255, 255));
        appointmentsTab.setFont(new Font("Calibri", 0, 18)); // NOI18N

        aDateSeach.setFont(new Font("Calibri", 0, 14)); // NOI18N
        aDateSeach.setText("Date:");

        createAppointmentBtn.setFont(new Font("Calibri", 1, 14)); // NOI18N
        createAppointmentBtn.setText("Create New Appointment");
        createAppointmentBtn.addActionListener(event -> moveToPetTab(true));

        aClientSearch.setFont(new Font("Calibri", 0, 14)); // NOI18N
        aClientSearch.setText("Client's Last Name:");

        aClientField.setFont(new Font("Calibri", 0, 14)); // NOI18N

        aDateField.setFont(new Font("Calibri", 0, 14)); // NOI18N

        aSearchBtn.setBackground(new Color(255, 255, 255));
        aSearchBtn.setFont(new Font("Calibri", 1, 14)); // NOI18N
        aSearchBtn.setText("Search");
        aSearchBtn.addActionListener(event -> myAppointmentTableModel.executeAppointmentSearch());

        aPetSearch.setFont(new Font("Calibri", 0, 14)); // NOI18N
        aPetSearch.setText("Pet's Name:");

        appointmentTableScroll.setBackground(new Color(255, 255, 255));

        appointmentsTable.setFont(new Font("Calibri", 0, 14)); // NOI18N
        appointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {},
                new String [] {
                        "Date", "Time", "Client", "Pet", "Reason for Visit", "Actions"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentsTable.setGridColor(new Color(255, 255, 255));
        appointmentTableScroll.setViewportView(appointmentTable);
        if (appointmentsTable.getColumnModel().getColumnCount() > 0) {
            appointmentsTable.getColumnModel().getColumn(0).setResizable(false);
            appointmentsTable.getColumnModel().getColumn(1).setResizable(false);
            appointmentsTable.getColumnModel().getColumn(2).setResizable(false);
            appointmentsTable.getColumnModel().getColumn(3).setResizable(false);
            appointmentsTable.getColumnModel().getColumn(4).setResizable(false);
            appointmentsTable.getColumnModel().getColumn(5).setResizable(false);
        }

        aPetField.setFont(new Font("Calibri", 0, 14)); // NOI18N

        GroupLayout appointmentsTabLayout = new GroupLayout(appointmentsTab);
        appointmentsTab.setLayout(appointmentsTabLayout);
        appointmentsTabLayout.setHorizontalGroup(
                appointmentsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(appointmentsTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(appointmentsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(appointmentsTabLayout.createSequentialGroup()
                                                .addGroup(appointmentsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(createAppointmentBtn)
                                                        .addGroup(appointmentsTabLayout.createSequentialGroup()
                                                                .addComponent(aDateSeach)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(aDateField, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(aClientSearch)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(aClientField, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(aPetSearch)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(aPetField, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(50, 50, 50)
                                                                .addComponent(aSearchBtn)))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(appointmentTableScroll, GroupLayout.Alignment.TRAILING))
                                .addContainerGap())
        );
        appointmentsTabLayout.setVerticalGroup(
                appointmentsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(appointmentsTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(createAppointmentBtn)
                                .addGap(18, 18, 18)
                                .addGroup(appointmentsTabLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(aDateSeach)
                                        .addComponent(aClientSearch)
                                        .addComponent(aPetSearch)
                                        .addComponent(aSearchBtn)
                                        .addComponent(aDateField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(aClientField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(aPetField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appointmentTableScroll, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(70, Short.MAX_VALUE))
        );

        dashboardTabs.addTab("Appointments", appointmentsTab);        

        petsTab.setBackground(new Color(255, 255, 255));
        createPetBtn.setFont(new Font("Calibri", 1, 14)); // NOI18N
        createPetBtn.setText("Create New Pet");
        createPetBtn.addActionListener(event -> moveToClientTab(true));

        pNameSearch.setFont(new Font("Calibri", 0, 14)); // NOI18N
        pNameSearch.setText("Pet's Name:");

        pClientField.setFont(new Font("Calibri", 0, 14)); // NOI18N

        pNameField.setFont(new Font("Calibri", 0, 14)); // NOI18N

        petTableScroll.setBackground(new Color(255, 255, 255));

        petsTable.setFont(new Font("Calibri", 0, 14)); // NOI18N
        petsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {},
                new String [] {
                        "Pet Name", "Species", "Gender", "Date of Birth", "Client's Last Name", "Actions"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        petsTable.setGridColor(new Color(255, 255, 255));
        petTableScroll.setViewportView(petTable);
        if (petsTable.getColumnModel().getColumnCount() > 0) {
            petsTable.getColumnModel().getColumn(0).setResizable(false);
            petsTable.getColumnModel().getColumn(1).setResizable(false);
            petsTable.getColumnModel().getColumn(2).setResizable(false);
            petsTable.getColumnModel().getColumn(3).setResizable(false);
            petsTable.getColumnModel().getColumn(4).setResizable(false);
            petsTable.getColumnModel().getColumn(5).setResizable(false);
        }

        pClientSearch.setFont(new Font("Calibri", 0, 14)); // NOI18N
        pClientSearch.setText("Client's Last Name:");
        
        pSearchBtn.setBackground(new Color(255, 255, 255));
        pSearchBtn.setFont(new Font("Calibri", 1, 14)); // NOI18N
        pSearchBtn.setText("Search");
        pSearchBtn.addActionListener(event -> myPetTableModel.executePetSearch());

        GroupLayout petsTabLayout = new GroupLayout(petsTab);
        petsTab.setLayout(petsTabLayout);
        petsTabLayout.setHorizontalGroup(
                petsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(petsTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(petsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(petsTabLayout.createSequentialGroup()
                                                .addComponent(createPetBtn)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(petsTabLayout.createSequentialGroup()
                                                .addComponent(pNameSearch)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pNameField, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(pClientSearch)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pClientField, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                                                .addGap(50, 50, 50)
                                                .addComponent(pSearchBtn))
                                        .addComponent(petTableScroll, GroupLayout.Alignment.TRAILING))
                                .addContainerGap())
        );
        petsTabLayout.setVerticalGroup(
                petsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(petsTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(createPetBtn)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(petsTabLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(pNameSearch)
                                        .addComponent(pClientSearch)
                                        .addComponent(pSearchBtn)
                                        .addComponent(pNameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pClientField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(petTableScroll, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(75, Short.MAX_VALUE))
        );

        dashboardTabs.addTab("Pets", petsTab);

        clientsTab.setBackground(new Color(255, 255, 255));

        clientTable.getColumnModel().getColumn(4).setCellRenderer(clientRenderer);
        clientTable.getColumnModel().getColumn(4).setCellEditor(clientEditor);
        clientTable.setRowHeight(clientRenderer.getTableCellRendererComponent(clientTable, null, true, true, 0, 0).getPreferredSize().height);
        clientTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        clientTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        clientTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        clientTable.getColumnModel().getColumn(4).setPreferredWidth(120);

        petTable.getColumnModel().getColumn(5).setCellRenderer(petRenderer);
        petTable.getColumnModel().getColumn(5).setCellEditor(petEditor);
        petTable.setRowHeight(petRenderer.getTableCellRendererComponent(petTable, null, true, true, 0, 0).getPreferredSize().height);

        appointmentTable.getColumnModel().getColumn(5).setCellRenderer(appointmentRenderer);
        appointmentTable.getColumnModel().getColumn(5).setCellEditor(appointmentEditor);
        appointmentTable.setRowHeight(appointmentRenderer.getTableCellRendererComponent(appointmentTable, null, true, true, 0, 0).getPreferredSize().height);

        clientTableScroll.setBackground(new Color(255, 255, 255));

        clientsTable.setFont(new Font("Calibri", 0, 14)); // NOI18N
        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "First Name", "Last Name", "Email Address", "Phone Number", "Actions"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clientsTable.setGridColor(new Color(255, 255, 255));
        clientTableScroll.setViewportView(clientTable);
        if (clientsTable.getColumnModel().getColumnCount() > 0) {
            clientsTable.getColumnModel().getColumn(0).setResizable(false);
            clientsTable.getColumnModel().getColumn(1).setResizable(false);
            clientsTable.getColumnModel().getColumn(2).setResizable(false);
            clientsTable.getColumnModel().getColumn(3).setResizable(false);
            clientsTable.getColumnModel().getColumn(4).setResizable(false);
        }

        createClientBtn.setFont(new Font("Calibri", 1, 14)); // NOI18N
        createClientBtn.setText("Create New Client");
        createClientBtn.addActionListener(event -> {
            try {
                openCreateClient();
            } catch (ParseException ex) {
                // Do nothing
            }
        });

        cNameSearch.setFont(new Font("Calibri", 0, 14)); // NOI18N
        cNameSearch.setText("Last Name:");

        cEmailSearch.setFont(new Font("Calibri", 0, 14)); // NOI18N
        cEmailSearch.setText("Email:");

        cNumberSearch.setFont(new Font("Calibri", 0, 14)); // NOI18N
        cNumberSearch.setText("Phone:");

        cSearchBtn.setBackground(new Color(255, 255, 255));
        cSearchBtn.setFont(new Font("Calibri", 1, 14)); // NOI18N
        cSearchBtn.setText("Search");
        cSearchBtn.addActionListener(event -> myClientTableModel.executeClientSearch());

        cNameField.setFont(new Font("Calibri", 0, 14)); // NOI18N

        cEmailField.setFont(new Font("Calibri", 0, 14)); // NOI18N

        cNumberField.setFont(new Font("Calibri", 0, 14)); // NOI18N

        GroupLayout clientsTabLayout = new GroupLayout(clientsTab);
        clientsTab.setLayout(clientsTabLayout);
        clientsTabLayout.setHorizontalGroup(
            clientsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(clientsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(clientTableScroll)
                    .addGroup(clientsTabLayout.createSequentialGroup()
                        .addGroup(clientsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(createClientBtn)
                            .addGroup(clientsTabLayout.createSequentialGroup()
                                .addComponent(cNameSearch)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cNameField, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cEmailSearch)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cEmailField, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cNumberSearch)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cNumberField, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)))
                        .addGap(50, 50, 50)
                        .addComponent(cSearchBtn)))
                .addContainerGap())
        );
        clientsTabLayout.setVerticalGroup(
            clientsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(clientsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createClientBtn)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(clientsTabLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cNameSearch)
                    .addComponent(cEmailSearch)
                    .addComponent(cNumberSearch)
                    .addComponent(cSearchBtn)
                    .addComponent(cNameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cEmailField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cNumberField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(clientTableScroll, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        dashboardTabs.addTab("Clients", clientsTab);

        logoutBtn.setBackground(new Color(255, 255, 255));
        logoutBtn.setFont(new Font("Calibri", 1, 14)); // NOI18N
        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(event -> logout());

        GroupLayout dashboardPanelLayout = new GroupLayout(dashboardPanel);
        dashboardPanel.setLayout(dashboardPanelLayout);
        dashboardPanelLayout.setHorizontalGroup(
            dashboardPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(dashboardTabs, GroupLayout.PREFERRED_SIZE, 1100, GroupLayout.PREFERRED_SIZE)
            .addGroup(GroupLayout.Alignment.TRAILING, dashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutBtn)
                .addContainerGap())
        );
        dashboardPanelLayout.setVerticalGroup(
            dashboardPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, dashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutBtn)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dashboardTabs, GroupLayout.PREFERRED_SIZE, 500, GroupLayout.PREFERRED_SIZE))
        );

        dashboardTabs.getAccessibleContext().setAccessibleName("");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(dashboardPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(dashboardPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack(); // Set the size of the jframe according to the contents
    }// </editor-fold>//GEN-END:initComponents

    // Handler for deleteing a client
    private void deleteSelectedClient(String phoneNumber, String firstName, String lastName) {
        // Ask the user to confirm client deletion      
        int delete = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + firstName + " " + lastName + "?", "Confirm Client Deletion", JOptionPane.YES_NO_OPTION);
        // If Yes (0) was selected
        if (delete == 0) {
            // Delete the client
            vetPortal.deleteClient(phoneNumber, firstName, lastName);
            myClientTableModel.refetchClients();
            myPetTableModel.refetchPets();
        }
        // If No (1) was selected do nothing

    } //end of deleteSelectedClient()
    
    // Handler for deleting a pet
    private void deleteSelectedPet(String petName, String petSpecies, String petGender, String petDOB){
        // As the user to confirm the pet deletion
        int delete = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + petName + "?", "Confirm Pet Deletion", JOptionPane.YES_NO_OPTION);
        // If Yes (0) was selected
        if (delete == 0) {
            // Delete the pet
            vetPortal.deletePet(petName, petSpecies, petGender, petDOB);
            myPetTableModel.refetchPets();
        }
        // If No (1) was selected do nothing
    } // end of deleteSelectedPet()

    // Handler for deleting an appointment
    private void deleteSelectedAppointment(String date, String time){
        // Ask the user to confirm the appointment deletion
        int delete = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the appointment at " + date + " " + time + "?", "Confirm Appointment Deletion", JOptionPane.YES_NO_OPTION);
        // If Yes (0) was selected
        if (delete == 0) {
            // Delete the appointment
            vetPortal.deleteAppointment(date, time);
            myAppointmentTableModel.refetchUpcomingAppointments();
        }
        // If No (1) was selected do nothing
    } // end of deleteSelectedAppointment()

    // Handler for logout button click event
    private void logout() {
        // Open Login Page
        vetPortal = new VetPortal();
        vetPortal.setVisible(true);
        // Close Vet Portal Dashboard
        dispose();
    }

    // Handler for create client button click event
    private void openCreateClient() throws ParseException {
	// Open the Add Client Page
        addClientPage = new AddClient(vetPortal);
        addClientPage.setVisible(true);        
    }

    private void openViewClient(ArrayList<Pets> clientOwnedPets, ArrayList<Appointments> clientScheduledAppointments, String currentFirstName, String currentLastName, String currentEmail, String currentPhoneNumber) {
        viewClientPage = new ViewClient(clientOwnedPets , clientScheduledAppointments, currentFirstName, currentLastName, currentEmail, currentPhoneNumber);
        viewClientPage.setVisible(true);
    }

    // Handler for edit selected client click event
    private void editSelectedClient(String currentFirstName, String currentLastName, String currentEmail, String currentPhoneNumber) throws ParseException {
        // Open the Edit Client Page and pass the selected client's information
        editClientPage = new EditClient(vetPortal, currentFirstName, currentLastName, currentEmail, currentPhoneNumber);
        editClientPage.setVisible(true);
    }

    // Handler for edit selected pet click event
    private void editSelectedPet(String currentName, String currentSpecies, String currentGender, String currentDateOfBirth) throws ParseException {
        // Open the Edit Pet Page and pass the selected pets's information
        editPetPage = new EditPet(vetPortal, currentName, currentSpecies, currentGender, currentDateOfBirth);
        editPetPage.setVisible(true);
    }

    // Handler for edit selected appointment click event
    private void editSelectedAppointment(String currentDate, String currentTime, String currentClient, String currentPet, String currentReason) {
        // Open the Edit Appointment Page and pass the selected appointment's information
        editAppointmentPage = new EditAppointment(vetPortal, currentDate, currentTime, currentClient, currentPet, currentReason);
        editAppointmentPage.setVisible(true);
    }
    
    public JTable getClientsTable() {
        return clientsTable;
    }

    public JTable getClientTable() {
        return clientTable;
    }

    public JTable getPetsTable() {
        return petsTable;
    }

    public JTable getPetTable() {
        return petTable;
    }

    public JTable getAppointmentTable() {
        return appointmentTable;
    }

    public MyClientTableModel getMyClientTableModel() {
        return myClientTableModel;
    }

    public MyPetTableModel getMyPetTableModel() {
        return myPetTableModel;
    }

    public MyAppointmentTableModel getMyAppointmentTableModel() {
        return myAppointmentTableModel;
    }

    // Create pet function
    private void openCreatePet() throws ParseException {
        // Open the Add Pet Page
        Object firstName = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 0);
        Object lastName = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 1);
        addPetPage = new AddPet(vetPortal, (String)firstName, (String)lastName);
        addPetPage.setVisible(true);
    }

    private void openCreateAppointment() {
        Object petName = myPetTableModel.getValueAt(petTable.getSelectedRow(), 0);
        Object petSpecies = myPetTableModel.getValueAt(petTable.getSelectedRow(), 1);
        Object petGender = myPetTableModel.getValueAt(petTable.getSelectedRow(), 2);
        Object petDateOfBirth = myPetTableModel.getValueAt(petTable.getSelectedRow(), 3);
        //Object clientLastName = myPetTableModel.getValueAt(petTable.getSelectedRow(), 4);

        vetPortal.getVetDatabase().open();
        int petID = vetPortal.getVetDatabase().getPetID((String)petName, (String)petSpecies, (String)petGender, (String)petDateOfBirth);
        int petOwner = vetPortal.getVetDatabase().getPetOwner((String)petName, (String)petSpecies, (String)petGender, (String)petDateOfBirth);
        String clientFullName = vetPortal.getVetDatabase().getClientFullName(petOwner);

        addAppointmentPage = new AddAppointment(vetPortal, (String)petName, clientFullName, petOwner, petID);
        addAppointmentPage.setVisible(true);
    }

    // Move to Client tab
    public void moveToClientTab(boolean showAddPetMessage) {
        // If the user clicked from the Add New Pet button, show the redirection message
        if (showAddPetMessage) {
            // Notify the user of redirection and instruct user to select client
            JOptionPane.showMessageDialog(null, "Please select a client and click the Add Pet button (paw icon) to create a new pet.", "Add Pet Instructions", JOptionPane.PLAIN_MESSAGE);
        } 
        dashboardTabs.setSelectedIndex(2);
    }
    
    // Move to Pet tab
    public void moveToPetTab(boolean showAddApptMessage) {
        if (showAddApptMessage) {
            // Notify the user of redirection and instruct user to select pet
            JOptionPane.showMessageDialog(null, "Please select a pet and click the Add Appointment button to create a new appointment.", "Add Appointment Instructions", JOptionPane.PLAIN_MESSAGE);    
        }
        dashboardTabs.setSelectedIndex(1);
    }
    
    // Move to Appointments tab
    public void moveToApptTab() {
        dashboardTabs.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField aClientField;
    private JLabel aClientSearch;
    private DatePicker aDateField;
    private JLabel aDateSeach;
    private JTextField aPetField;
    private JLabel aPetSearch;
    private JButton aSearchBtn;
    private JScrollPane appointmentTableScroll;
    private JPanel appointmentsTab;
    private JTable appointmentsTable;
    private JTextField cEmailField;
    private JLabel cEmailSearch;
    private JTextField cNameField;
    private JLabel cNameSearch;
    private JTextField cNumberField;
    private JLabel cNumberSearch;
    private JButton cSearchBtn;
    private JScrollPane clientTableScroll;
    private JPanel clientsTab;
    private JTable clientsTable;
    private JButton createAppointmentBtn;
    private JButton createClientBtn;
    private JButton createPetBtn;
    private JPanel dashboardPanel;
    private JTabbedPane dashboardTabs;
    private JButton logoutBtn;
    private JTextField pClientField;
    private JLabel pClientSearch;
    private JTextField pNameField;
    private JLabel pNameSearch;
    private JButton pSearchBtn;
    private JTable petsTable;
    private JScrollPane petTableScroll;
    private JPanel petsTab;


    //Objects for Client Table
    private MyClientTableModel myClientTableModel;
    private JTable clientTable;
    private ClientActionRenderer clientRenderer;
    private ClientActionEditor clientEditor;

    //Objects for Pet Table
    private MyPetTableModel myPetTableModel;
    private JTable petTable;
    private PetActionRenderer petRenderer;
    private PetActionEditor petEditor;

    //Objects for Appointment Table
    private MyAppointmentTableModel myAppointmentTableModel;
    private JTable appointmentTable;
    private AppointmentActionRenderer appointmentRenderer;
    private AppointmentActionEditor appointmentEditor;
    // End of variables declaration//GEN-END:variables

    // Action Pane for Clients Table
    public class ClientActionPane extends JPanel {

        private JButton editButton;
        private JButton deleteButton;
        private JButton addPetButton;
        private JButton viewClientButton;

        public ClientActionPane() {
            setLayout(new GridBagLayout());
            // Add icons and tool tips to buttons
            editButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/edit.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            editButton.setToolTipText("Edit Client");
            deleteButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/trash.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            deleteButton.setToolTipText("Delete Client");
            addPetButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/paw.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            addPetButton.setToolTipText("Add Pet");
            viewClientButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/link-open.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            viewClientButton.setToolTipText("View Client Info");

            add(editButton);
            add(deleteButton);
            add(addPetButton);
            add(viewClientButton);

            editButton.addActionListener(event -> edit());
            deleteButton.addActionListener(event -> delete());
            addPetButton.addActionListener(event -> addPet());
            viewClientButton.addActionListener(event -> viewClientInfo());
        } //end of constructor

        public void addActionListener(ActionListener listener) {
            editButton.addActionListener(listener);
            deleteButton.addActionListener(listener);
        }
        
        private void edit() {
            // Get the information for the selected client
            Object selectedFirstName = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 0);
            Object selectedLastName = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 1);
            Object selectedEmail = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 2);
            Object selectedPhoneNumber = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 3);
            try {
                // Pass to the event handler
                editSelectedClient((String) selectedFirstName, (String) selectedLastName, (String) selectedEmail, (String) selectedPhoneNumber);
            } catch (ParseException ex) {
                // Do nothing
            }
        }          

        private void delete() {
            Object selectedPhoneNumber = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 3);
            Object selectedFirstName = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 0);
            Object selectedLastName = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 1);
            deleteSelectedClient((String) selectedPhoneNumber, (String) selectedFirstName, (String) selectedLastName);
        }

        private void addPet() {
            try {
                openCreatePet();
            } catch (ParseException ex) {
                // Do nothing
            }
        }

        private void viewClientInfo() {
            Object selectedFirstName = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 0);
            Object selectedLastName = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 1);
            Object selectedEmail = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 2);
            Object selectedPhoneNumber = myClientTableModel.getValueAt(clientTable.getSelectedRow(), 3);

            vetPortal.getVetDatabase().open();
            int ownerID = vetPortal.getVetDatabase().getClientID((String)selectedPhoneNumber);
            ArrayList<Pets> clientOwnedPets = vetPortal.getVetDatabase().getPetsByOwnerID(ownerID);
            ArrayList<Appointments> clientScheduledAppointments = vetPortal.getVetDatabase().getAppointmentsByClientID(ownerID);

            openViewClient(clientOwnedPets, clientScheduledAppointments, (String)selectedFirstName, (String)selectedLastName, (String)selectedEmail, (String)selectedPhoneNumber);
        }
        
    } //end of ActionPane

    public class MyClientTableModel extends AbstractTableModel {

        private  List<Clients> clientData;

        public MyClientTableModel() {
            clientData = new ArrayList<>(25);
        }

        public List<Clients> getClientData() {
            return clientData;
        }
        
        public void setClientData(List<Clients> newData) {
            this.clientData = newData;
        }

        @Override
        public String getColumnName(int column) {
            String value = null;
            switch (column) {
                case 0:
                    value = "First Name";
                    break;
                case 1:
                    value = "Last Name";
                    break;
                case 2:
                    value = "Email Address";
                    break;
                case 3:
                    value = "Phone Number";
                    break;
                case 4:
                    value = "Actions";
                    break;
            }
            return value;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            Class value = Object.class;
            switch (columnIndex) {
                case 0:
                case 1:
                case 2:
                case 3:
                    value = String.class;
                    break;
            }
            return value;
        }

        @Override
        public int getRowCount() {
            return clientData.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Clients obj = clientData.get(rowIndex);
            String value = null;
            switch (columnIndex) {
                case 0:
                    value = obj.getClientFirstName();
                    break;
                case 1:
                    value = obj.getClientLastName();
                    break;
                case 2:
                    value = obj.getClientEmail();
                    break;
                case 3:
                    value = obj.getClientPhoneNumber();
                    break;
            }
            return value;
        }

        public void add(Clients content) {
            int startIndex = getRowCount();
            clientData.add(content);
            fireTableRowsInserted(startIndex, getRowCount() - 1);
        }

        public void refetchClients() {
            clientData.clear();
            fireTableDataChanged();
            vetPortal.viewAllClients();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 4;
        }
        
        // Handler for search clients button click event
        private void executeClientSearch() {
            List<Clients> clients = myClientTableModel.getClientData();
            String searchName = cNameField.getText();
            String searchEmail = cEmailField.getText();
            String searchPhone = cNumberField.getText();
            
            refetchClients();
            
            // If all fields are empty, reset the table
            if ("".equals(searchName) && "".equals(searchEmail) && "(   )    -    ".equals(searchPhone)) {
                refetchClients();               
            // If user supplied search terms
            } else {                   
                // Get the filtered list
                List<Clients> matches = Search.searchClients(clients, searchName, searchEmail, searchPhone);
                // If matches were found
                if (matches.size() > 0) {
                    // Set the table to display only the matched rows
                    myClientTableModel.setClientData(matches);
                    fireTableDataChanged();
                // If no matches were found, notify the user and don't change the table
                } else {
                    JOptionPane.showMessageDialog(null, "The search returned no results.", "No Search Results", JOptionPane.WARNING_MESSAGE);
                }                
            }          
        } // end of executeClientSearch()
        
    } //end of MyClientTableModel

    public class ClientActionRenderer extends DefaultTableCellRenderer {

        private ClientActionPane clientActionPane;

        public ClientActionRenderer() {
            clientActionPane = new ClientActionPane();
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return clientActionPane;
        }
    } //end of DefaultTableCellRenderer

    public class ClientActionEditor extends AbstractCellEditor implements TableCellEditor {

        private ClientActionPane clientActionPane;

        public ClientActionEditor() {
            clientActionPane = new ClientActionPane();
            clientActionPane.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            stopCellEditing();
                        }
                    });
                }
            });
        }

        @Override
        public Object getCellEditorValue() {
            return null;
        }

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            return clientActionPane;
        }
    } //end of AbstractCellEditor

    // Action Pane for Pets Table
    public class PetActionPane extends JPanel {

        private JButton editButton;
        private JButton deleteButton;
        private JButton addAppointmentButton;

        public PetActionPane() {
            setLayout(new GridBagLayout());
            // Add icons and tool tips to buttons
            editButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/edit.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            editButton.setToolTipText("Edit Client");
            deleteButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/trash.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            deleteButton.setToolTipText("Delete Client");
            addAppointmentButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/calendar-plus.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            addAppointmentButton.setToolTipText("Add Appointment");

            add(editButton);
            add(deleteButton);
            add(addAppointmentButton);

            editButton.addActionListener(event -> edit());
            deleteButton.addActionListener(event -> delete());
            addAppointmentButton.addActionListener(event -> addAppointment());
        } //end of constructor

        public void addActionListener(ActionListener listener) {
            editButton.addActionListener(listener);
            deleteButton.addActionListener(listener);
        }

        private void edit() {
            // Get the information for the selected pet
            Object selectedName = myPetTableModel.getValueAt(petTable.getSelectedRow(), 0);
            Object selectedSpecies = myPetTableModel.getValueAt(petTable.getSelectedRow(), 1);
            Object selectedGender = myPetTableModel.getValueAt(petTable.getSelectedRow(), 2);
            Object selectedDateOfBirth = myPetTableModel.getValueAt(petTable.getSelectedRow(), 3);
            try {
                // Pass to the event handler
                editSelectedPet((String)selectedName, (String)selectedSpecies, (String)selectedGender, (String)selectedDateOfBirth);
            } catch (ParseException ex) {
                // DO nothing
            }
        }

        private void delete() {
            // Get the date for the selected pet
            Object selectedPetName = myPetTableModel.getValueAt(petTable.getSelectedRow(), 0);
            Object selectedPetSpecies = myPetTableModel.getValueAt(petTable.getSelectedRow(), 1);
            Object selectedPetGender = myPetTableModel.getValueAt(petTable.getSelectedRow(), 2);
            Object selectedPetDOB = myPetTableModel.getValueAt(petTable.getSelectedRow(), 3);
            // Send the data to the delete function
            deleteSelectedPet((String) selectedPetName, (String) selectedPetSpecies, (String) selectedPetGender, (String) selectedPetDOB);
        }

        private void addAppointment() {
            openCreateAppointment();
        }

    } //end of ActionPane

    public class MyPetTableModel extends AbstractTableModel {

        private  List<Pets> petData;

        public MyPetTableModel() {
            petData = new ArrayList<>(25);
        }

        public List<Pets> getPetData() {
            return petData;
        }
        
        public void setPetData(List<Pets> newData) {
            this.petData = newData;
        }

        @Override
        public String getColumnName(int column) {
            String value = null;
            switch (column) {
                case 0:
                    value = "Pet Name";
                    break;
                case 1:
                    value = "Species";
                    break;
                case 2:
                    value = "Gender";
                    break;
                case 3:
                    value = "Date of Birth";
                    break;
                case 4:
                    value = "Client's Last Name";
                    break;
                case 5:
                    value = "Actions";
                    break;
            }
            return value;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            Class value = Object.class;
            switch (columnIndex) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    value = String.class;
                    break;
            }
            return value;
        }

        @Override
        public int getRowCount() {
            return petData.size();
        }

        @Override
        public int getColumnCount() {
            return 6;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Pets obj = petData.get(rowIndex);

            String value = null;
            switch (columnIndex) {
                case 0:
                    value = obj.getPetName();
                    break;
                case 1:
                    value = obj.getPetSpecies();
                    break;
                case 2:
                    value = obj.getPetGender();
                    break;
                case 3:
                    value = obj.getPetDateOfBirth();
                    break;
                case 4:
                    value = obj.getPetOwner();
            }
            return value;
        }

        public void add(Pets content) {
            int startIndex = getRowCount();
            petData.add(content);
            fireTableRowsInserted(startIndex, getRowCount() - 1);
        }

        public void refetchPets() {
            petData.clear();
            fireTableDataChanged();
            vetPortal.viewAllPets();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 5;
        }
        
        // Handler for search pets button click event
        private void executePetSearch() {
            List<Pets> pets = myPetTableModel.getPetData();
            String searchName = pNameField.getText();
            String searchOwner = pClientField.getText();
            
            refetchPets();
            
            // If all fields are empty, reset the table
            if ("".equals(searchName) && "".equals(searchOwner)) {
                refetchPets();              
            // If user supplied search terms
            } else {                   
                // Get the filtered list
                List<Pets> matches = Search.searchPets(pets, searchName, searchOwner);
                // If there are matches, show them in the table
                if (matches.size() > 0) {
                    // Set the table to display only the matched rows
                    myPetTableModel.setPetData(matches);
                    fireTableDataChanged();
                // If no matches were found, notify the user and don't change the table
                } else {
                    JOptionPane.showMessageDialog(null, "The search returned no results.", "No Search Results", JOptionPane.WARNING_MESSAGE);
                }                   
            }          
        } // end of executePetSearch()
    } //end of MyPetTableModel

    public class PetActionRenderer extends DefaultTableCellRenderer {

        private PetActionPane petActionPane;

        public PetActionRenderer() {
            petActionPane = new PetActionPane();
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return petActionPane;
        }
    } //end of DefaultTableCellRenderer

    public class PetActionEditor extends AbstractCellEditor implements TableCellEditor {

        private PetActionPane petActionPane;

        public PetActionEditor() {
            petActionPane = new PetActionPane();
            petActionPane.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            stopCellEditing();
                        }
                    });
                }
            });
        }

        @Override
        public Object getCellEditorValue() {
            return null;
        }

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            return petActionPane;
        }
    } //end of AbstractCellEditor

    // Action Pane for Appointments Table
    public class AppointmentActionPane extends JPanel {

        private JButton editButton;
        private JButton deleteButton;

        public AppointmentActionPane() {
            setLayout(new GridBagLayout());
            // Add icons and tool tips to buttons
            editButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/edit.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            editButton.setToolTipText("Edit Appointment");
            deleteButton = new JButton(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/trash.png")).getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            deleteButton.setToolTipText("Delete Appointment");

            add(editButton);
            add(deleteButton);

            editButton.addActionListener(event -> edit());
            deleteButton.addActionListener(event -> delete());
        } //end of constructor

        public void addActionListener(ActionListener listener) {
            editButton.addActionListener(listener);
            deleteButton.addActionListener(listener);
        }

        private void edit() {
            // Get the information for the selected appointment
            Object selectedDate = myAppointmentTableModel.getValueAt(appointmentTable.getSelectedRow(), 0);
            Object selectedTime = myAppointmentTableModel.getValueAt(appointmentTable.getSelectedRow(), 1);
            Object selectedClient = myAppointmentTableModel.getValueAt(appointmentTable.getSelectedRow(), 2);
            Object selectedPet = myAppointmentTableModel.getValueAt(appointmentTable.getSelectedRow(), 3);
            Object selectedReason = myAppointmentTableModel.getValueAt(appointmentTable.getSelectedRow(), 4);
            editSelectedAppointment((String)selectedDate, (String)selectedTime, (String)selectedClient, (String)selectedPet, (String)selectedReason);
        }

        private void delete() {
            // Get the date for the selected appointment
            Object selectedDate = myAppointmentTableModel.getValueAt(appointmentTable.getSelectedRow(), 0);
            Object selectedTime = myAppointmentTableModel.getValueAt(appointmentTable.getSelectedRow(), 1);
            // Send the data to the delete function
            deleteSelectedAppointment((String)selectedDate, (String)selectedTime);
        }

    } //end of ActionPane

    public class MyAppointmentTableModel extends AbstractTableModel {

        private  List<Appointments> appointmentsData;

        public MyAppointmentTableModel() {
            appointmentsData = new ArrayList<>(25);
        }

        public List<Appointments> getAppointmentsData() {
            return appointmentsData;
        }

        public void setAppointmentsData(List<Appointments> newData) {
            this.appointmentsData = newData;
        }

        @Override
        public String getColumnName(int column) {
            String value = null;
            switch (column) {
                case 0:
                    value = "Date";
                    break;
                case 1:
                    value = "Time";
                    break;
                case 2:
                    value = "Client";
                    break;
                case 3:
                    value = "Pet";
                    break;
                case 4:
                    value = "Reason for Visit";
                    break;
                case 5:
                    value = "Actions";
                    break;
            }
            return value;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            Class value = Object.class;
            switch (columnIndex) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    value = String.class;
                    break;
            }
            return value;
        }

        @Override
        public int getRowCount() {
            return appointmentsData.size();
        }

        @Override
        public int getColumnCount() {
            return 6;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Appointments obj = appointmentsData.get(rowIndex);

            String value = null;
            switch (columnIndex) {
                case 0:
                    value = obj.getAptDate();
                    break;
                case 1:
                    value = obj.getAptTime();
                    break;
                case 2:
                    value = obj.getClient();
                    break;
                case 3:
                    value = obj.getPet();
                    break;
                case 4:
                    value = obj.getAptReason();
            }
            return value;
        }

        public void add(Appointments content) {
            int startIndex = getRowCount();
            appointmentsData.add(content);
            fireTableRowsInserted(startIndex, getRowCount() - 1);
        }
        
        public void refetchUpcomingAppointments() {
            appointmentsData.clear();
            fireTableDataChanged();
            vetPortal.viewUpcomingAppointments();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 5;
        }
        
        // Handler for search pets button click event
        private void executeAppointmentSearch() {
            List<Appointments> appointments = myAppointmentTableModel.getAppointmentsData();
            String searchDate = aDateField.getText();            
            String searchClient = aClientField.getText();
            String searchPet = aPetField.getText();
            
            refetchUpcomingAppointments();
            
            // If all fields are empty, reset the table
            if ("".equals(searchDate) && "".equals(searchPet) && "".equals(searchClient)) {
                refetchUpcomingAppointments();              
            // If user supplied search terms
            } else {                   
                // Get the filtered list
                List<Appointments> matches = Search.searchAppointments(appointments, searchDate, searchClient, searchPet);
                // If there are matches, show them in the table
                if (matches.size() > 0) {
                    // Set the table to display only the matched rows
                    myAppointmentTableModel.setAppointmentsData(matches);
                    fireTableDataChanged();
                // If no matches were found, notify the user and don't change the table
                } else {
                    JOptionPane.showMessageDialog(null, "The search returned no results.", "No Search Results", JOptionPane.WARNING_MESSAGE);
                }                   
            }          
        } // end of executeAppointmentSearch()
        
    } //end of MyAppointmentTableModel

    public class AppointmentActionRenderer extends DefaultTableCellRenderer {

        private AppointmentActionPane appointmentActionPane;

        public AppointmentActionRenderer() {
            appointmentActionPane = new AppointmentActionPane();            
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return appointmentActionPane;
        }
    } //end of DefaultTableCellRenderer

    public class AppointmentActionEditor extends AbstractCellEditor implements TableCellEditor {

        private AppointmentActionPane appointmentActionPane;

        public AppointmentActionEditor() {
            appointmentActionPane = new AppointmentActionPane();
            appointmentActionPane.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            stopCellEditing();
                        }
                    });
                }
            });
        }

        @Override
        public Object getCellEditorValue() {
            return null;
        }

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            return appointmentActionPane;
        }
    } //end of AbstractCellEditor

} //end of DashboardsGui